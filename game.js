class Game {
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
    static CONSTANTS = {
        INITIAL_JUMP_FORCE: -15,
        INITIAL_GRAVITY: 0.4,
        INITIAL_MOVE_SPEED: 0.8,
        INITIAL_MAX_VELOCITY: 7.5,
        ENEMY_SPAWN_SCORE: 800,
        ENEMY_SPAWN_THRESHOLD: 400,
        JUMPSCARE_TRIGGER_SCORE: 5000,
        JUMPSCARE_PRE_DURATION: 180,
        JUMPSCARE_DURATION: 120,
        PLATFORM_COUNT: 15,
        PLATFORM_WIDTH: 60,
        PLATFORM_HEIGHT: 15,
        PLAYER_SIZE: 40
    };

    constructor() {
        this.canvas = document.getElementById('gameCanvas');
        this.ctx = this.canvas.getContext('2d');
        
        // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä canvas
        this.setupCanvas();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => this.setupCanvas());
        
        // ID –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
        this.animationId = null;
        
        // ID —Ç–∞–π–º–µ—Ä–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã
        this.gameOverTimerId = null;
        
        // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ endGame
        this.endGameCalled = false;
        
        // –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç FPS
        this.lastTime = 0;
        this.deltaTime = 0;
        this.targetFPS = 60;
        this.fixedTimeStep = 1000 / this.targetFPS; // 16.67ms –¥–ª—è 60 FPS
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ FPS
        this.fpsCounter = 0;
        this.fpsLastTime = 0;
        this.currentFPS = 60;
        this.showDebugInfo = false; // –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        
        // –û–î–ò–ù–ê–ö–û–í–ê–Ø —Ñ–∏–∑–∏–∫–∞ –¥–ª—è –í–°–ï–• —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        this.INITIAL_JUMP_FORCE = Game.CONSTANTS.INITIAL_JUMP_FORCE;
        this.INITIAL_GRAVITY = Game.CONSTANTS.INITIAL_GRAVITY;
        this.INITIAL_MOVE_SPEED = Game.CONSTANTS.INITIAL_MOVE_SPEED;
        this.INITIAL_MAX_VELOCITY = Game.CONSTANTS.INITIAL_MAX_VELOCITY;
        
        console.log('–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ–∏–∑–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', {
            moveSpeed: this.INITIAL_MOVE_SPEED,
            maxVelocity: this.INITIAL_MAX_VELOCITY,
            jumpForce: this.INITIAL_JUMP_FORCE,
            gravity: this.INITIAL_GRAVITY
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—á–µ—Ç–∞
        this.scoreDisplay = {
            current: 0,
            target: 0,
            scale: 1
        };
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã
        this.handleKeyDown = this.handleKeyDown.bind(this);
        this.handleKeyUp = this.handleKeyUp.bind(this);
        this.gameLoop = this.gameLoop.bind(this);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ setupControls()
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è —Ñ–æ–Ω–∞
        this.backgroundGradient = this.ctx.createLinearGradient(0, 0, 0, this.canvas.height);
        this.backgroundGradient.addColorStop(0, '#00BFFF');  // –°–∏–Ω–µ–µ –Ω–µ–±–æ
        this.backgroundGradient.addColorStop(0.7, '#87CEEB'); // –ë–æ–ª–µ–µ —Å–≤–µ—Ç–ª–æ–µ –Ω–µ–±–æ
        this.backgroundGradient.addColorStop(0.7, '#90EE90'); // –ù–∞—á–∞–ª–æ —Ç—Ä–∞–≤—ã
        this.backgroundGradient.addColorStop(1, '#228B22');   // –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω–∞—è —Ç—Ä–∞–≤–∞
        
        // –ì—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º
        this.platformGradient = this.ctx.createLinearGradient(0, 0, 0, 15);
        this.platformGradient.addColorStop(0, '#FFFFFF');    // –ë–µ–ª—ã–π
        this.platformGradient.addColorStop(1, '#E0E0E0');    // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        this.enemy = {
            active: false,
            x: 0,
            y: 0,
            width: 40,
            height: 40,
            platform: null,
            nextSpawnScore: Game.CONSTANTS.ENEMY_SPAWN_SCORE,
            lastSpawnScore: 0,
            warningAlpha: 0  // –î–ª—è –º–∏–≥–∞–Ω–∏—è
        };
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
        // this.accelerometer = { x: 0, y: 0, z: 0 };
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        this.setupControls();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∫—Ä–∏–º–µ—Ä–∞
        this.jumpscare = {
            active: false,
            prePhase: false,
            timer: 0,
            duration: 120,
            preTimer: 0,
            preDuration: 180,
            scale: 1,
            opacity: 0,
            triggered: false,
            nextTriggerScore: Game.CONSTANTS.JUMPSCARE_TRIGGER_SCORE,
            sound: new Audio('napryajennyiy-zvuk.mp3'),
            originalMusicVolume: 0.5  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏
        };
        
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–≤—É–∫ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
        this.jumpscare.sound.load();
        this.jumpscare.sound.volume = 1.0;  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ
        this.initializeAudio();
        
        // –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    }
    
    setupCanvas() {
        // –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        const baseWidth = 400;
        const baseHeight = 600;
        const baseRatio = baseWidth / baseHeight;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        const windowWidth = window.innerWidth;
        const windowHeight = window.innerHeight;
        const windowRatio = windowWidth / windowHeight;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        let width, height;
        if (windowRatio > baseRatio) {
            height = Math.min(windowHeight, baseHeight);
            width = height * baseRatio;
        } else {
            width = Math.min(windowWidth, baseWidth);
            height = width / baseRatio;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
        this.canvas.width = width;
        this.canvas.height = height;
        
        console.log('üìê Canvas –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', {
            width: width,
            height: height,
            actualWidth: this.canvas.width,
            actualHeight: this.canvas.height
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã
        this.createGradients();
    }
    
    createGradients() {
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        this.backgroundGradient = this.ctx.createLinearGradient(0, 0, 0, this.canvas.height);
        this.backgroundGradient.addColorStop(0, '#00BFFF');
        this.backgroundGradient.addColorStop(0.7, '#87CEEB');
        this.backgroundGradient.addColorStop(0.7, '#90EE90');
        this.backgroundGradient.addColorStop(1, '#228B22');
        
        this.platformGradient = this.ctx.createLinearGradient(0, 0, 0, 15);
        this.platformGradient.addColorStop(0, '#FFFFFF');
        this.platformGradient.addColorStop(1, '#E0E0E0');
    }
    
    setupControls() {
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
        document.addEventListener('keydown', this.handleKeyDown);
        document.addEventListener('keyup', this.handleKeyUp);
        
        if (this.isMobile) {
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∞—á-—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            this.canvas.addEventListener('touchstart', (e) => {
                e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
                const touch = e.touches[0];
                const rect = this.canvas.getBoundingClientRect();
                const touchX = touch.clientX - rect.left;
                
                // –ï—Å–ª–∏ —Ç–∞–ø –≤ –ª–µ–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ —ç–∫—Ä–∞–Ω–∞
                if (touchX < rect.width / 2) {
                    this.keys.left = true;
                    this.keys.right = false;
                } 
                // –ï—Å–ª–∏ —Ç–∞–ø –≤ –ø—Ä–∞–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ —ç–∫—Ä–∞–Ω–∞
                else {
                    this.keys.right = true;
                    this.keys.left = false;
                }
            });

            this.canvas.addEventListener('touchend', (e) => {
                e.preventDefault();
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏
                this.keys.left = false;
                this.keys.right = false;
            });

            this.canvas.addEventListener('touchcancel', (e) => {
                e.preventDefault();
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∫–∞—Å–∞–Ω–∏—è
                this.keys.left = false;
                this.keys.right = false;
            });
        }
    }
    
    handleOrientation(event) {
        if (event.gamma === null) return;
        
        // –ë–æ–ª–µ–µ –º—è–≥–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∫–ª–æ–Ω–æ–º –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        const tiltThreshold = 10; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä–æ–≥ –Ω–∞–∫–ª–æ–Ω–∞
        
        if (event.gamma < -tiltThreshold) {
            this.keys.left = true;
            this.keys.right = false;
        } else if (event.gamma > tiltThreshold) {
            this.keys.left = false;
            this.keys.right = true;
        } else {
            this.keys.left = false;
            this.keys.right = false;
        }
    }
    
    startNewGame() {
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
            this.animationId = null;
        }

        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (this.gameOverTimerId) {
            clearTimeout(this.gameOverTimerId);
            this.gameOverTimerId = null;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        this.endGameCalled = false;

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫ —Å–∫—Ä–∏–º–µ—Ä–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É–∑—ã–∫—É
        if (this.jumpscare && this.jumpscare.sound) {
            this.jumpscare.sound.pause();
            this.jumpscare.sound.currentTime = 0;
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏
        if (this.backgroundMusic) {
            this.backgroundMusic.volume = 0.5;
        }

        // –ü–µ—Ä—Å–æ–Ω–∞–∂
        this.player = {
            x: this.canvas.width / 2,
            y: this.canvas.height - 100,
            width: Game.CONSTANTS.PLAYER_SIZE,
            height: Game.CONSTANTS.PLAYER_SIZE,
            velocityY: Game.CONSTANTS.INITIAL_JUMP_FORCE,
            velocityX: 0,
            rotation: 0
        };
        
        console.log('üéÆ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫:', {
            canvasWidth: this.canvas.width,
            canvasHeight: this.canvas.height,
            playerX: this.player.x,
            playerY: this.player.y
        });
        
        // –ò–≥—Ä–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        this.platforms = [];
        this.score = 0;
        this.camera = {
            y: 0
        };
        this.gameOver = false;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç–∞ –ù–ï–ú–ï–î–õ–ï–ù–ù–û
        this.scoreDisplay = {
            current: 0,
            target: 0,
            scale: 1
        };
        
        // –§–û–†–°–ò–†–û–í–ê–ù–ù–û —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        const scoreElement = document.querySelector('.score-display, [data-score]');
        if (scoreElement) {
            scoreElement.textContent = '–°–ß–ï–¢: 0';
        }
        
        // –§–∏–∑–∏–∫–∞
        this.gravity = this.INITIAL_GRAVITY;
        this.jumpForce = this.INITIAL_JUMP_FORCE;
        this.moveSpeed = this.INITIAL_MOVE_SPEED;
        this.maxVelocityX = this.INITIAL_MAX_VELOCITY;
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        this.keys = {
            left: false,
            right: false
        };
        
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫—Ä–∏–º–µ—Ä–∞
        this.resetJumpscare();
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É–∑—ã–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –≤–∫–ª—é—á–µ–Ω–∞
        if (this.hasUserInteracted) {
            this.backgroundMusic.currentTime = 0;
            if (!this.isMusicPlaying) {
                this.playBackgroundMusic();
            } else {
                // –ï—Å–ª–∏ –º—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≥—Ä–æ–º–∫–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
                this.backgroundMusic.play().catch(e => console.log('Music resume failed:', e));
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        this.createPlatforms();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        this.enemy.active = false;
        this.enemy.nextSpawnScore = Game.CONSTANTS.ENEMY_SPAWN_SCORE;
        this.enemy.lastSpawnScore = 0;
        this.enemy.warningAlpha = 0;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        this.gameLoop();
    }
    
    createPlatforms() {
        this.platforms = [];
        for(let i = 0; i < Game.CONSTANTS.PLATFORM_COUNT; i++) {
            this.platforms.push({
                x: Math.random() * (this.canvas.width - Game.CONSTANTS.PLATFORM_WIDTH),
                y: this.canvas.height - (i * 60),
                width: Game.CONSTANTS.PLATFORM_WIDTH,
                height: Game.CONSTANTS.PLATFORM_HEIGHT
            });
        }
    }
    
    handleKeyDown(e) {
        if(e.code === 'ArrowLeft') this.keys.left = true;
        if(e.code === 'ArrowRight') this.keys.right = true;
    }
    
    handleKeyUp(e) {
        if(e.code === 'ArrowLeft') this.keys.left = false;
        if(e.code === 'ArrowRight') this.keys.right = false;
    }
    
    update() {
        if(this.gameOver) {
            console.log('‚ö†Ô∏è –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ –≤ update(), score:', this.score, 'player.y:', this.player?.y);
            // –ï—Å–ª–∏ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–º–µ—Ä –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            if(this.jumpscare.active || this.jumpscare.prePhase) {
                this.jumpscare.active = false;
                this.jumpscare.prePhase = false;
                this.jumpscare.sound.pause();
                this.jumpscare.sound.currentTime = 0;
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏
                if(this.backgroundMusic) {
                    this.backgroundMusic.volume = 0.5;
                }
            }
            return;
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º deltaTime –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ñ–∏–∑–∏–∫–∏
        const normalizedDeltaTime = Math.min(this.deltaTime / this.fixedTimeStep, 2.0); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º –≤ 2 —Ä–∞–∑–∞

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–∑–∏–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç FPS)
        this.player.velocityY += this.gravity * normalizedDeltaTime;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
        if(this.keys.left) {
            this.player.velocityX -= this.moveSpeed * normalizedDeltaTime;
            this.player.rotation = -0.2;
        } else if(this.keys.right) {
            this.player.velocityX += this.moveSpeed * normalizedDeltaTime;
            this.player.rotation = 0.2;
        } else {
            // –¢—Ä–µ–Ω–∏–µ —Ç–∞–∫–∂–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
            const frictionFactor = Math.pow(0.92, normalizedDeltaTime);
            this.player.velocityX *= frictionFactor;
            this.player.rotation = 0;
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
        this.player.velocityX = Math.max(Math.min(this.player.velocityX, this.maxVelocityX), -this.maxVelocityX);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç FPS)
        this.player.x += this.player.velocityX * normalizedDeltaTime;
        this.player.y += this.player.velocityY * normalizedDeltaTime;
        
        // –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫—Ä–∞—è —ç–∫—Ä–∞–Ω–∞
        if(this.player.x + this.player.width < 0) {
            this.player.x = this.canvas.width;
        }
        if(this.player.x > this.canvas.width) {
            this.player.x = -this.player.width;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
        this.platforms.forEach(platform => {
            if(this.checkCollision(this.player, platform)) {
                if(this.player.velocityY > 0 && 
                   this.player.y + this.player.height < platform.y + platform.height + this.player.velocityY) {
                    this.player.y = platform.y - this.player.height;
                    this.player.velocityY = this.jumpForce;
                }
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É –∏ —Å—á–µ—Ç
        if(this.player.y < this.canvas.height / 2) {
            let diff = this.canvas.height / 2 - this.player.y;
            this.camera.y += diff;
            this.player.y += diff;
            this.platforms.forEach(platform => {
                platform.y += diff;
            });
            this.score += Math.floor(diff);
            
            
            // –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç–∞
            this.scoreDisplay.target = Math.floor(this.score);
            this.scoreDisplay.scale = 1.2;
        }
        
        // –ü–ª–∞–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
        if(this.scoreDisplay.current !== this.scoreDisplay.target) {
            const diff = this.scoreDisplay.target - this.scoreDisplay.current;
            if (diff > 0) {
                this.scoreDisplay.current += Math.ceil(diff * 0.1);
            } else {
                this.scoreDisplay.current += Math.floor(diff * 0.1);
            }
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—à—Ç–∞–± –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É
        this.scoreDisplay.scale = this.scoreDisplay.scale * 0.95 + 1 * 0.05;
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        this.platforms = this.platforms.filter(platform => platform.y < this.canvas.height);
        while(this.platforms.length < Game.CONSTANTS.PLATFORM_COUNT) {
            let lastPlatform = this.platforms[this.platforms.length - 1];
            this.platforms.push({
                x: Math.random() * (this.canvas.width - Game.CONSTANTS.PLATFORM_WIDTH),
                y: lastPlatform.y - (Math.random() * 40 + 40),  // –ë–æ–ª–µ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                width: Game.CONSTANTS.PLATFORM_WIDTH,
                height: Game.CONSTANTS.PLATFORM_HEIGHT
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        const nextThousand = Math.ceil(this.score / 1000) * 1000;
        const spawnThreshold = nextThousand - Game.CONSTANTS.ENEMY_SPAWN_THRESHOLD;
        
        if(!this.enemy.active && this.score >= spawnThreshold && this.score < nextThousand && spawnThreshold > this.enemy.lastSpawnScore) {
            this.enemy.lastSpawnScore = spawnThreshold;
            this.spawnEnemy();
        }

        // –ï—Å–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é –∏ —ç—Ñ—Ñ–µ–∫—Ç –º–∏–≥–∞–Ω–∏—è
        if(this.enemy.active) {
            this.enemy.y = this.enemy.platform.y;
            
            // –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–µ –∏ –∑–∞–º–µ—Ç–Ω–æ–µ –º–∏–≥–∞–Ω–∏–µ
            this.enemy.warningAlpha = 0.5 + Math.sin(Date.now() / 300) * 0.3;
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —É—à–ª–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
            if(this.enemy.y > this.canvas.height) {
                this.enemy.active = false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º —Å –Ω–µ–±–æ–ª—å—à–∏–º –±—É—Ñ–µ—Ä–æ–º
            if(this.checkCollision(this.player, {
                x: this.enemy.x + 5,
                y: this.enemy.y + 5,
                width: this.enemy.width - 10,
                height: this.enemy.height - 10
            })) {
                console.log('üí• –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º! –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gameOver = true');
                this.gameOver = true;
                this.gameOverTimerId = setTimeout(() => this.endGame(), 1000);
                return;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–∏–≥—Ä—ã—à
        if(this.player.y > this.canvas.height) {
            console.log('‚¨áÔ∏è –ò–≥—Ä–æ–∫ —É–ø–∞–ª –≤–Ω–∏–∑! player.y:', this.player.y, 'canvas.height:', this.canvas.height, '–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gameOver = true');
            this.gameOver = true;
            this.gameOverTimerId = setTimeout(() => this.endGame(), 1000);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∞–∑—ã —Å–∫—Ä–∏–º–µ—Ä–∞
        const currentScrimerTarget = this.jumpscare.nextTriggerScore;
        const preScrimerScore = currentScrimerTarget - 200;  // –ó–∞ 200 –æ—á–∫–æ–≤ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–º–µ—Ç–∫–∏

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç –¥–æ—Å—Ç–∏–≥ –Ω—É–∂–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏
        if(!this.jumpscare.triggered && 
           !this.jumpscare.prePhase && 
           this.score >= preScrimerScore) {
            console.log('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∫—Ä–∏–º–µ—Ä–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:', currentScrimerTarget);
            this.jumpscare.prePhase = true;
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏
            this.jumpscare.originalMusicVolume = this.backgroundMusic.volume;
            // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏
            const fadeOutInterval = setInterval(() => {
                if(this.backgroundMusic.volume > 0.1) {
                    this.backgroundMusic.volume -= 0.1;
                } else {
                    clearInterval(fadeOutInterval);
                }
            }, 100);
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–≤—É–∫ —Å–∫—Ä–∏–º–µ—Ä–∞
            this.jumpscare.sound.play().catch(e => console.log('Audio play failed:', e));
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Ñ–∞–∑—É
        if(this.jumpscare.prePhase && !this.jumpscare.active) {
            this.jumpscare.preTimer++;
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∫—Ä–∏–º–µ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω—É–∂–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ —Å—á–µ—Ç–∞
            if(this.jumpscare.preTimer >= this.jumpscare.preDuration || this.score >= currentScrimerTarget) {
                this.jumpscare.prePhase = false;
                this.jumpscare.active = true;
                this.jumpscare.triggered = true;
                console.log('–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∫—Ä–∏–º–µ—Ä–∞ –Ω–∞ –æ—Ç–º–µ—Ç–∫–µ:', currentScrimerTarget);
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–∫—Ä–∏–º–µ—Ä–∞
        if(this.jumpscare.active) {
            this.jumpscare.timer++;
            
            if(this.jumpscare.timer < 30) {
                // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
                this.jumpscare.opacity = this.jumpscare.timer / 30;
                this.jumpscare.scale = 1 + (this.jumpscare.timer / 15);
            } else if(this.jumpscare.timer < this.jumpscare.duration - 30) {
                // –î–µ—Ä–∂–∏–º –¥–æ–ª—å—à–µ
                this.jumpscare.opacity = 1;
                this.jumpscare.scale = 3 + Math.sin(this.jumpscare.timer * 0.1) * 0.2;
            } else if(this.jumpscare.timer < this.jumpscare.duration) {
                // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
                this.jumpscare.opacity = (this.jumpscare.duration - this.jumpscare.timer) / 30;
            } else {
                // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫—Ä–∏–º–µ—Ä–∞
                this.jumpscare.active = false;
                this.jumpscare.triggered = false;
                this.jumpscare.timer = 0;
                this.jumpscare.preTimer = 0;
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –æ—Ç–º–µ—Ç–∫—É –¥–ª—è —Å–∫—Ä–∏–º–µ—Ä–∞
                this.jumpscare.nextTriggerScore += 5000;
                console.log('–°–ª–µ–¥—É—é—â–∏–π —Å–∫—Ä–∏–º–µ—Ä –±—É–¥–µ—Ç –Ω–∞:', this.jumpscare.nextTriggerScore);
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫ —Å–∫—Ä–∏–º–µ—Ä–∞
                this.jumpscare.sound.pause();
                this.jumpscare.sound.currentTime = 0;
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏
                const fadeInInterval = setInterval(() => {
                    if(this.backgroundMusic.volume < this.jumpscare.originalMusicVolume) {
                        this.backgroundMusic.volume += 0.1;
                    } else {
                        clearInterval(fadeInInterval);
                    }
                }, 100);
            }
        }
    }
    
    checkCollision(rect1, rect2) {
        return rect1.x < rect2.x + rect2.width &&
               rect1.x + rect1.width > rect2.x &&
               rect1.y < rect2.y + rect2.height &&
               rect1.y + rect1.height > rect2.y;
    }
    
    drawKenito(x, y, rotation) {
        this.ctx.save();
        this.ctx.translate(x + this.player.width/2, y + this.player.height/2);
        this.ctx.rotate(rotation);

        // –†–∞–∑–º–µ—Ä—ã —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞
        const headRadius = this.player.width/2;
        const bodyWidth = headRadius * 1.3;
        const bodyHeight = headRadius * 1.8;
        const legWidth = headRadius/2.2;
        const legHeight = headRadius * 1.3;
        const bootHeight = headRadius/3;

        // –†–∏—Å—É–µ–º –≥–æ–ª–æ–≤—É (–ë–û–õ–¨–®–ê–Ø, –∫–∞–∫ –≤ Roblox)
        this.ctx.fillStyle = '#F4C2A1'; // –°–≤–µ—Ç–ª—ã–π —Ü–≤–µ—Ç –∫–æ–∂–∏
        this.ctx.fillRect(-headRadius * 1.2, -headRadius * 1.2, headRadius * 2.4, headRadius * 2.4);

        // –†–∏—Å—É–µ–º –≤–æ–ª–æ—Å—ã (–æ—Ä–∞–Ω–∂–µ–≤—ã–µ, –ë–û–õ–¨–®–ò–ï)
        this.ctx.fillStyle = '#FF8C00'; // –Ø—Ä–∫–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç
        this.ctx.fillRect(-headRadius * 1.1, -headRadius * 1.4, headRadius * 2.2, headRadius * 0.8);
        
        // –ë–æ–∫–æ–≤—ã–µ —á–∞—Å—Ç–∏ –≤–æ–ª–æ—Å (–ë–û–õ–¨–®–ò–ï)
        this.ctx.fillRect(-headRadius * 1.3, -headRadius * 1.0, headRadius * 0.4, headRadius * 1.0);
        this.ctx.fillRect(headRadius * 0.9, -headRadius * 1.0, headRadius * 0.4, headRadius * 1.0);
        
        // –ß–µ–ª–∫–∞ —Å –ø—Ä—è–¥—è–º–∏
        this.ctx.fillRect(-headRadius * 0.8, -headRadius * 1.3, headRadius * 0.4, headRadius * 0.4);
        this.ctx.fillRect(-headRadius * 0.4, -headRadius * 1.3, headRadius * 0.4, headRadius * 0.4);
        this.ctx.fillRect(0, -headRadius * 1.3, headRadius * 0.4, headRadius * 0.4);
        this.ctx.fillRect(headRadius * 0.4, -headRadius * 1.3, headRadius * 0.4, headRadius * 0.4);
        
        // –¢–µ–Ω–∏ –≤ –≤–æ–ª–æ—Å–∞—Ö
        this.ctx.fillStyle = '#E67E00';
        this.ctx.fillRect(-headRadius * 1.1, -headRadius * 1.4, headRadius * 2.2, headRadius * 0.15);

        // –†–∏—Å—É–µ–º –≥–ª–∞–∑–∞ (–û–ì–†–û–ú–ù–´–ï, –∫–∞–∫ –≤ Roblox)
        this.ctx.fillStyle = 'white';
        this.ctx.beginPath();
        this.ctx.arc(-headRadius/2, -headRadius/3, headRadius/3, 0, Math.PI * 2);
        this.ctx.arc(headRadius/2, -headRadius/3, headRadius/3, 0, Math.PI * 2);
        this.ctx.fill();
        
        // –ó—Ä–∞—á–∫–∏ (–ë–û–õ–¨–®–ò–ï)
        this.ctx.fillStyle = 'black';
        this.ctx.beginPath();
        this.ctx.arc(-headRadius/2, -headRadius/3, headRadius/5, 0, Math.PI * 2);
        this.ctx.arc(headRadius/2, -headRadius/3, headRadius/5, 0, Math.PI * 2);
        this.ctx.fill();
        
        // –ë–ª–∏–∫–∏ –≤ –≥–ª–∞–∑–∞—Ö (–ë–û–õ–¨–®–ò–ï)
        this.ctx.fillStyle = 'white';
        this.ctx.beginPath();
        this.ctx.arc(-headRadius/2 - headRadius/15, -headRadius/3 - headRadius/15, headRadius/12, 0, Math.PI * 2);
        this.ctx.arc(headRadius/2 - headRadius/15, -headRadius/3 - headRadius/15, headRadius/12, 0, Math.PI * 2);
        this.ctx.fill();

        // –†–∏—Å—É–µ–º –±—Ä–æ–≤–∏ (–ë–û–õ–¨–®–ò–ï)
        this.ctx.fillStyle = '#8B4513';
        this.ctx.fillRect(-headRadius/2, -headRadius/2, headRadius/3, headRadius/12);
        this.ctx.fillRect(headRadius/6, -headRadius/2, headRadius/3, headRadius/12);

        // –†–∏—Å—É–µ–º –Ω–æ—Å (–ë–û–õ–¨–®–û–ô)
        this.ctx.fillStyle = '#F4C2A1';
        this.ctx.fillRect(-headRadius/15, -headRadius/6, headRadius/7, headRadius/10);

        // –†–∏—Å—É–µ–º —Ä–æ—Ç (–ë–û–õ–¨–®–ê–Ø —É–ª—ã–±–∫–∞)
        this.ctx.beginPath();
        this.ctx.strokeStyle = 'black';
        this.ctx.lineWidth = 4;
        this.ctx.arc(0, headRadius/6, headRadius/2, 0, Math.PI);
        this.ctx.stroke();
        
        // –†–∏—Å—É–µ–º –∑—É–±—ã
        this.ctx.fillStyle = 'white';
        this.ctx.fillRect(-headRadius/6, headRadius/8, headRadius/8, headRadius/15);
        this.ctx.fillRect(headRadius/20, headRadius/8, headRadius/8, headRadius/15);

        // –†–∏—Å—É–µ–º –∫—É—Ä—Ç–∫—É (–±–∏—Ä—é–∑–æ–≤–∞—è/–∑–µ–ª–µ–Ω–∞—è)
        this.ctx.fillStyle = '#20B2AA'; // –ë–∏—Ä—é–∑–æ–≤—ã–π —Ü–≤–µ—Ç
        this.ctx.fillRect(-bodyWidth/2, -headRadius/2, bodyWidth, bodyHeight);
        
        // –†–∏—Å—É–µ–º –≤–æ—Ä–æ—Ç–Ω–∏–∫ –∫—É—Ä—Ç–∫–∏ (–±–µ–ª—ã–π)
        this.ctx.fillStyle = 'white';
        this.ctx.fillRect(-bodyWidth/2, -headRadius/2, bodyWidth, headRadius/3);
        
        // –†–∏—Å—É–µ–º –±–µ–ª—ã–µ –ø–æ–ª–æ—Å—ã –Ω–∞ –ø–ª–µ—á–∞—Ö
        this.ctx.fillRect(-bodyWidth/2, -headRadius/3, bodyWidth, headRadius/8);
        this.ctx.fillRect(-bodyWidth/2, headRadius/6, bodyWidth, headRadius/8);

        // –†–∏—Å—É–µ–º –±–µ–ª—É—é —Ñ—É—Ç–±–æ–ª–∫—É –ø–æ–¥ –∫—É—Ä—Ç–∫–æ–π
        this.ctx.fillStyle = 'white';
        this.ctx.fillRect(-bodyWidth/2 + headRadius/8, -headRadius/6, bodyWidth - headRadius/4, bodyHeight/2.5);

        // –†–∏—Å—É–µ–º –Ω–æ–º–µ—Ä 456 –Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–µ (–û–ì–†–û–ú–ù–´–ô –∏ —è—Ä–∫–∏–π!)
        this.ctx.fillStyle = 'red'; // –ö–†–ê–°–ù–´–ô —Ü–≤–µ—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞!
        this.ctx.font = `bold ${headRadius/0.8}px Arial`; // –ï–©–ï –ë–û–õ–¨–®–ï!
        this.ctx.textAlign = 'center';
        this.ctx.fillText('456', 0, headRadius/6);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–Ω—É—é –æ–±–≤–æ–¥–∫—É –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏
        this.ctx.strokeStyle = 'black';
        this.ctx.lineWidth = 4;
        this.ctx.strokeText('456', 0, headRadius/6);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±–µ–ª—É—é —Ç–µ–Ω—å –¥–ª—è –µ—â–µ –±–æ–ª—å—à–µ–π —á–µ—Ç–∫–æ—Å—Ç–∏
        this.ctx.fillStyle = 'white';
        this.ctx.font = `bold ${headRadius/0.8}px Arial`;
        this.ctx.fillText('456', 2, headRadius/6 + 2);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
        this.ctx.fillStyle = 'red';
        this.ctx.fillText('456', 0, headRadius/6);

        // –†–∏—Å—É–µ–º —Ä—É–∫–∏ (—Å–æ–≥–Ω—É—Ç—ã–µ –≤ –ª–æ–∫—Ç—è—Ö, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
        this.ctx.fillStyle = '#F4C2A1';
        // –õ–µ–≤–∞—è —Ä—É–∫–∞ (—Å–æ–≥–Ω—É—Ç–∞—è)
        this.ctx.fillRect(-bodyWidth/2 - headRadius/6, -headRadius/8, headRadius/6, headRadius * 0.9);
        this.ctx.fillRect(-bodyWidth/2 - headRadius/3, headRadius/4, headRadius/4, headRadius/3);
        // –ü—Ä–∞–≤–∞—è —Ä—É–∫–∞ (—Å–æ–≥–Ω—É—Ç–∞—è)
        this.ctx.fillRect(bodyWidth/2, -headRadius/8, headRadius/6, headRadius * 0.9);
        this.ctx.fillRect(bodyWidth/2 + headRadius/8, headRadius/4, headRadius/4, headRadius/3);

        // –†–∏—Å—É–µ–º —à—Ç–∞–Ω—ã (–±–∏—Ä—é–∑–æ–≤—ã–µ)
        this.ctx.fillStyle = '#20B2AA';
        // –õ–µ–≤–∞—è –Ω–æ–≥–∞
        this.ctx.fillRect(-headRadius/2-legWidth/2, headRadius/2, legWidth, legHeight);
        // –ü—Ä–∞–≤–∞—è –Ω–æ–≥–∞
        this.ctx.fillRect(headRadius/2-legWidth/2, headRadius/2, legWidth, legHeight);

        // –†–∏—Å—É–µ–º –±–µ–ª—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏
        this.ctx.fillStyle = 'white';
        // –õ–µ–≤—ã–π –∫—Ä–æ—Å—Å–æ–≤–æ–∫
        this.ctx.fillRect(-headRadius/2-legWidth/2, headRadius/2+legHeight, legWidth, bootHeight);
        // –ü—Ä–∞–≤—ã–π –∫—Ä–æ—Å—Å–æ–≤–æ–∫
        this.ctx.fillRect(headRadius/2-legWidth/2, headRadius/2+legHeight, legWidth, bootHeight);
        
        // –ü–æ–¥–æ—à–≤–∞ –∫—Ä–æ—Å—Å–æ–≤–æ–∫ (–±–µ–ª–∞—è)
        this.ctx.fillStyle = 'white';
        this.ctx.fillRect(-headRadius/2-legWidth/2, headRadius/2+legHeight+bootHeight, legWidth, headRadius/10);
        this.ctx.fillRect(headRadius/2-legWidth/2, headRadius/2+legHeight+bootHeight, legWidth, headRadius/10);

        this.ctx.restore();
    }

    drawEvilKenito(x, y) {
        this.ctx.save();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –º–∏–≥–∞–Ω–∏—è
        this.ctx.globalAlpha = this.enemy.warningAlpha;
        
        this.ctx.translate(x + this.enemy.width/2, y + this.enemy.height/2);

        // –†–∞–∑–º–µ—Ä—ã Front Man (—Ç–æ—á–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏)
        const headRadius = this.enemy.width/2;
        const bodyWidth = headRadius * 1.4;
        const bodyHeight = headRadius * 2.0;
        const legWidth = headRadius/2.5;
        const legHeight = headRadius * 1.4;
        const bootHeight = headRadius/4;

        // –†–∏—Å—É–µ–º –≥–æ–ª–æ–≤—É (–∫—Ä—É–≥–ª–∞—è, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
        this.ctx.fillStyle = '#000000'; // –ß–µ—Ä–Ω—ã–π –∫–∞–ø—é—à–æ–Ω
        this.ctx.beginPath();
        this.ctx.arc(0, -headRadius/2, headRadius, 0, Math.PI * 2);
        this.ctx.fill();

        // –†–∏—Å—É–µ–º –±–µ–ª—ã–π –∫—Ä—É–≥ –Ω–∞ –º–∞—Å–∫–µ
        this.ctx.fillStyle = '#FFFFFF';
        this.ctx.beginPath();
        this.ctx.arc(0, -headRadius/2, headRadius/3, 0, Math.PI * 2);
        this.ctx.fill();
        
        // –ß–µ—Ä–Ω–∞—è –æ–±–≤–æ–¥–∫–∞ –±–µ–ª–æ–≥–æ –∫—Ä—É–≥–∞
        this.ctx.strokeStyle = '#000000';
        this.ctx.lineWidth = 3;
        this.ctx.stroke();

        // –†–∏—Å—É–µ–º –∫—Ä–∞—Å–Ω—ã–π –∫–æ–º–±–∏–Ω–µ–∑–æ–Ω
        this.ctx.fillStyle = '#FF0000'; // –Ø—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π
        this.ctx.fillRect(-bodyWidth/2, -headRadius/2, bodyWidth, bodyHeight);
        
        // –†–∏—Å—É–µ–º —á–µ—Ä–Ω—É—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é (–º–æ–ª–Ω–∏—è)
        this.ctx.fillStyle = '#000000';
        this.ctx.fillRect(-headRadius/20, -headRadius/2, headRadius/10, bodyHeight);

        // –†–∏—Å—É–µ–º —á–µ—Ä–Ω—ã–µ –∫–∞—Ä–º–∞–Ω—ã –Ω–∞ –≥—Ä—É–¥–∏
        this.ctx.fillStyle = '#000000';
        this.ctx.fillRect(-headRadius/3, -headRadius/4, headRadius/4, headRadius/6);
        this.ctx.fillRect(headRadius/6, -headRadius/4, headRadius/4, headRadius/6);

        // –†–∏—Å—É–µ–º —á–µ—Ä–Ω—ã–π –ø–æ—è—Å
        this.ctx.fillStyle = '#000000';
        this.ctx.fillRect(-bodyWidth/2, headRadius/3, bodyWidth, headRadius/8);

        // –†–∏—Å—É–µ–º —Ä—É–∫–∏ (–∫—Ä–∞—Å–Ω—ã–µ —Å —á–µ—Ä–Ω—ã–º–∏ –º–∞–Ω–∂–µ—Ç–∞–º–∏)
        this.ctx.fillStyle = '#FF0000';
        // –õ–µ–≤–∞—è —Ä—É–∫–∞
        this.ctx.fillRect(-bodyWidth/2 - headRadius/5, -headRadius/8, headRadius/5, headRadius * 1.2);
        // –ü—Ä–∞–≤–∞—è —Ä—É–∫–∞
        this.ctx.fillRect(bodyWidth/2, -headRadius/8, headRadius/5, headRadius * 1.2);
        
        // –ß–µ—Ä–Ω—ã–µ –º–∞–Ω–∂–µ—Ç—ã –Ω–∞ —Ä—É–∫–∞—Ö
        this.ctx.fillStyle = '#000000';
        this.ctx.fillRect(-bodyWidth/2 - headRadius/5, headRadius/2, headRadius/5, headRadius/6);
        this.ctx.fillRect(bodyWidth/2, headRadius/2, headRadius/5, headRadius/6);

        // –†–∏—Å—É–µ–º –Ω–æ–≥–∏ (–∫—Ä–∞—Å–Ω—ã–µ)
        this.ctx.fillStyle = '#FF0000';
        // –õ–µ–≤–∞—è –Ω–æ–≥–∞
        this.ctx.fillRect(-headRadius/2-legWidth/2, headRadius/2, legWidth, legHeight);
        // –ü—Ä–∞–≤–∞—è –Ω–æ–≥–∞
        this.ctx.fillRect(headRadius/2-legWidth/2, headRadius/2, legWidth, legHeight);

        // –†–∏—Å—É–µ–º —á–µ—Ä–Ω—ã–µ –±–æ—Ç–∏–Ω–∫–∏
        this.ctx.fillStyle = '#000000';
        // –õ–µ–≤—ã–π –±–æ—Ç–∏–Ω–æ–∫
        this.ctx.fillRect(-headRadius/2-legWidth/2, headRadius/2+legHeight, legWidth, bootHeight);
        // –ü—Ä–∞–≤—ã–π –±–æ—Ç–∏–Ω–æ–∫
        this.ctx.fillRect(headRadius/2-legWidth/2, headRadius/2+legHeight, legWidth, bootHeight);

        this.ctx.restore();
    }

    drawEvilKenitoJumpscare() {
        this.ctx.save();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        this.ctx.globalAlpha = this.jumpscare.opacity;
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
        this.ctx.translate(this.canvas.width / 2, this.canvas.height / 2);
        this.ctx.scale(this.jumpscare.scale, this.jumpscare.scale);
        
        // –†–∞–∑–º–µ—Ä—ã Front Man (–≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ)
        const headRadius = this.player.width;
        const bodyWidth = headRadius * 1.4;
        const bodyHeight = headRadius * 2.0;
        const legWidth = headRadius/2.5;
        const legHeight = headRadius * 1.4;
        const bootHeight = headRadius/4;

        // –†–∏—Å—É–µ–º –≥–æ–ª–æ–≤—É (–∫—Ä—É–≥–ª–∞—è, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
        this.ctx.fillStyle = '#000000'; // –ß–µ—Ä–Ω—ã–π –∫–∞–ø—é—à–æ–Ω
        this.ctx.beginPath();
        this.ctx.arc(0, -headRadius/2, headRadius, 0, Math.PI * 2);
        this.ctx.fill();

        // –†–∏—Å—É–µ–º –±–µ–ª—ã–π –∫—Ä—É–≥ –Ω–∞ –º–∞—Å–∫–µ (–ë–û–õ–¨–®–û–ô)
        this.ctx.fillStyle = '#FFFFFF';
        this.ctx.beginPath();
        this.ctx.arc(0, -headRadius/2, headRadius/2.5, 0, Math.PI * 2);
        this.ctx.fill();
        
        // –ß–µ—Ä–Ω–∞—è –æ–±–≤–æ–¥–∫–∞ –±–µ–ª–æ–≥–æ –∫—Ä—É–≥–∞
        this.ctx.strokeStyle = '#000000';
        this.ctx.lineWidth = 6;
        this.ctx.stroke();

        // –†–∏—Å—É–µ–º –∫—Ä–∞—Å–Ω—ã–π –∫–æ–º–±–∏–Ω–µ–∑–æ–Ω
        this.ctx.fillStyle = '#FF0000'; // –Ø—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π
        this.ctx.fillRect(-bodyWidth/2, -headRadius/2, bodyWidth, bodyHeight);
        
        // –†–∏—Å—É–µ–º —á–µ—Ä–Ω—É—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é (–º–æ–ª–Ω–∏—è)
        this.ctx.fillStyle = '#000000';
        this.ctx.fillRect(-headRadius/20, -headRadius/2, headRadius/10, bodyHeight);

        // –†–∏—Å—É–µ–º —á–µ—Ä–Ω—ã–µ –∫–∞—Ä–º–∞–Ω—ã –Ω–∞ –≥—Ä—É–¥–∏
        this.ctx.fillStyle = '#000000';
        this.ctx.fillRect(-headRadius/3, -headRadius/4, headRadius/4, headRadius/6);
        this.ctx.fillRect(headRadius/6, -headRadius/4, headRadius/4, headRadius/6);

        // –†–∏—Å—É–µ–º —á–µ—Ä–Ω—ã–π –ø–æ—è—Å
        this.ctx.fillStyle = '#000000';
        this.ctx.fillRect(-bodyWidth/2, headRadius/3, bodyWidth, headRadius/8);

        // –†–∏—Å—É–µ–º —Ä—É–∫–∏ (–∫—Ä–∞—Å–Ω—ã–µ —Å —á–µ—Ä–Ω—ã–º–∏ –º–∞–Ω–∂–µ—Ç–∞–º–∏)
        this.ctx.fillStyle = '#FF0000';
        // –õ–µ–≤–∞—è —Ä—É–∫–∞
        this.ctx.fillRect(-bodyWidth/2 - headRadius/5, -headRadius/8, headRadius/5, headRadius * 1.2);
        // –ü—Ä–∞–≤–∞—è —Ä—É–∫–∞
        this.ctx.fillRect(bodyWidth/2, -headRadius/8, headRadius/5, headRadius * 1.2);
        
        // –ß–µ—Ä–Ω—ã–µ –º–∞–Ω–∂–µ—Ç—ã –Ω–∞ —Ä—É–∫–∞—Ö
        this.ctx.fillStyle = '#000000';
        this.ctx.fillRect(-bodyWidth/2 - headRadius/5, headRadius/2, headRadius/5, headRadius/6);
        this.ctx.fillRect(bodyWidth/2, headRadius/2, headRadius/5, headRadius/6);

        // –†–∏—Å—É–µ–º –Ω–æ–≥–∏ (–∫—Ä–∞—Å–Ω—ã–µ)
        this.ctx.fillStyle = '#FF0000';
        // –õ–µ–≤–∞—è –Ω–æ–≥–∞
        this.ctx.fillRect(-headRadius/2-legWidth/2, headRadius/2, legWidth, legHeight);
        // –ü—Ä–∞–≤–∞—è –Ω–æ–≥–∞
        this.ctx.fillRect(headRadius/2-legWidth/2, headRadius/2, legWidth, legHeight);

        // –†–∏—Å—É–µ–º —á–µ—Ä–Ω—ã–µ –±–æ—Ç–∏–Ω–∫–∏
        this.ctx.fillStyle = '#000000';
        // –õ–µ–≤—ã–π –±–æ—Ç–∏–Ω–æ–∫
        this.ctx.fillRect(-headRadius/2-legWidth/2, headRadius/2+legHeight, legWidth, bootHeight);
        // –ü—Ä–∞–≤—ã–π –±–æ—Ç–∏–Ω–æ–∫
        this.ctx.fillRect(headRadius/2-legWidth/2, headRadius/2+legHeight, legWidth, bootHeight);
        
        this.ctx.restore();
    }

    draw() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        // –†–∏—Å—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        this.ctx.fillStyle = this.backgroundGradient;
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–∞–∫–∞
        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';
        // –ù–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –æ–±–ª–∞–∫–æ–≤
        this.drawCloud(50, 50, 40);
        this.drawCloud(200, 100, 50);
        this.drawCloud(350, 70, 45);
        
        // –†–∏—Å—É–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        this.platforms.forEach(platform => {
            // –¢–µ–Ω—å –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            this.ctx.shadowColor = 'rgba(0, 0, 0, 0.2)';
            this.ctx.shadowBlur = 5;
            this.ctx.shadowOffsetY = 2;
            
            // –û—Å–Ω–æ–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
            this.ctx.fillStyle = this.platformGradient;
            this.ctx.beginPath();
            this.ctx.roundRect(platform.x, platform.y, platform.width, platform.height, 5);
            this.ctx.fill();
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–Ω–∏ –ø–µ—Ä–µ–¥ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º –ö–µ–Ω–∏—Ç–æ
        this.ctx.shadowColor = 'transparent';
        this.ctx.shadowBlur = 0;
        this.ctx.shadowOffsetY = 0;
        
        // –†–∏—Å—É–µ–º –ö–µ–Ω–∏—Ç–æ
        this.drawKenito(this.player.x, this.player.y, this.player.rotation);
        
        // –†–∏—Å—É–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if(this.enemy.active) {
            // –†–∏—Å—É–µ–º –∫—Ä—É–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            this.ctx.save();
            this.ctx.beginPath();
            this.ctx.arc(this.enemy.x + this.enemy.width/2, 
                        this.enemy.y + this.enemy.height/2, 
                        this.enemy.width * 0.8,
                        0, Math.PI * 2);
            this.ctx.fillStyle = `rgba(255, 0, 0, ${this.enemy.warningAlpha * 0.3})`;
            this.ctx.fill();
            this.ctx.restore();
            
            // –†–∏—Å—É–µ–º –∑–ª–æ–≥–æ –ö–µ–Ω–∏—Ç–æ
            this.drawEvilKenito(this.enemy.x, this.enemy.y);
        }
        
        
        // –†–∏—Å—É–µ–º —Å—á–µ—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        this.ctx.save();
        
        // –§–æ–Ω –¥–ª—è —Å—á–µ—Ç–∞
        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';
        this.ctx.beginPath();
        this.ctx.roundRect(5, 5, 150, 40, 10);
        this.ctx.fill();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        this.ctx.translate(80, 30);
        this.ctx.scale(this.scoreDisplay.scale, this.scoreDisplay.scale);
        this.ctx.translate(-80, -30);
        
        // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —Å—á–µ—Ç–∞
        this.ctx.fillStyle = '#fff';
        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';
        this.ctx.shadowBlur = 5;
        this.ctx.font = 'bold 24px Arial';
        this.ctx.textAlign = 'left';
        this.ctx.fillText(`–°–ß–ï–¢: ${this.scoreDisplay.current}`, 15, 32);
        
        this.ctx.restore();
        
        // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
        if(this.gameOver) {
            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
            this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
            
            this.ctx.shadowColor = 'rgba(255, 255, 255, 0.5)';
            this.ctx.shadowBlur = 10;
            this.ctx.fillStyle = '#fff';
            this.ctx.font = 'bold 48px Arial';
            this.ctx.textAlign = 'center';
            this.ctx.fillText('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!', this.canvas.width/2, this.canvas.height/2 - 20);
            this.ctx.font = '20px Arial';
            this.ctx.fillText(`–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: ${Math.floor(this.score)}`, this.canvas.width/2, this.canvas.height/2 + 40);
        }
        
        // –†–∏—Å—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∞–∑—ã
        if(this.jumpscare.prePhase) {
            // –ó–∞—Ç–µ–º–Ω—è–µ–º —ç–∫—Ä–∞–Ω –ø—É–ª—å—Å–∏—Ä—É—é—â–∏–º –∫—Ä–∞—Å–Ω—ã–º
            const alpha = 0.1 + Math.sin(this.jumpscare.preTimer * 0.1) * 0.05;
            this.ctx.fillStyle = `rgba(255, 0, 0, ${alpha})`;
            this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        }
        
        // –†–∏—Å—É–µ–º —Å–∫—Ä–∏–º–µ—Ä
        if(this.jumpscare.active) {
            // –ë–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–µ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞
            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';
            this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω—É—é –≤–∏–Ω—å–µ—Ç–∫—É
            const gradient = this.ctx.createRadialGradient(
                this.canvas.width/2, this.canvas.height/2, 0,
                this.canvas.width/2, this.canvas.height/2, this.canvas.width/2
            );
            gradient.addColorStop(0, 'rgba(255, 0, 0, 0)');
            gradient.addColorStop(1, `rgba(255, 0, 0, ${this.jumpscare.opacity * 0.5})`);
            this.ctx.fillStyle = gradient;
            this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
            
            // –†–∏—Å—É–µ–º –∑–ª–æ–≥–æ –ö–µ–Ω–∏—Ç–æ
            this.drawEvilKenitoJumpscare();
        }
    }
    
    drawCloud(x, y, size) {
        this.ctx.beginPath();
        this.ctx.arc(x, y, size, 0, Math.PI * 2);
        this.ctx.arc(x + size * 0.5, y - size * 0.2, size * 0.7, 0, Math.PI * 2);
        this.ctx.arc(x + size, y, size * 0.8, 0, Math.PI * 2);
        this.ctx.fill();
    }
    
    gameLoop(currentTime = 0) {
        // –í—ã—á–∏—Å–ª—è–µ–º deltaTime (–≤—Ä–µ–º—è –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏)
        if (this.lastTime === 0) {
            this.lastTime = currentTime;
            this.fpsLastTime = currentTime;
        }
        this.deltaTime = currentTime - this.lastTime;
        this.lastTime = currentTime;
        
        // –ü–æ–¥—Å—á–µ—Ç FPS –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        this.fpsCounter++;
        if (currentTime - this.fpsLastTime >= 1000) { // –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            this.currentFPS = this.fpsCounter;
            this.fpsCounter = 0;
            this.fpsLastTime = currentTime;
            
            // –õ–æ–≥–∏—Ä—É–µ–º FPS —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ—Ç–ª–∞–¥–∫–∞
            if (this.showDebugInfo) {
                console.log(`üéÆ FPS: ${this.currentFPS}, deltaTime: ${this.deltaTime.toFixed(2)}ms, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${this.isMobile ? '–º–æ–±–∏–ª—å–Ω–æ–µ' : '–¥–µ—Å–∫—Ç–æ–ø'}`);
            }
        }
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö —Å–∫–∞—á–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–æ–∫)
        if (this.deltaTime > 100) { // –ë–æ–ª—å—à–µ 100ms
            this.deltaTime = this.fixedTimeStep;
        }
        
        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–≤–æ–º –∫–∞–¥—Ä–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        if (this.score === 0 && this.scoreDisplay.current > 0) {
            console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Å—á–µ—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ:', this.scoreDisplay.current, '‚Üí 0');
            this.scoreDisplay.current = 0;
            this.scoreDisplay.target = 0;
        }
        
        this.update();
        this.draw();
        this.animationId = requestAnimationFrame(this.gameLoop);
    }

    spawnEnemy() {
        // –í—ã–±–∏—Ä–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–∑ –≤–µ—Ä—Ö–Ω–µ–π —Ç—Ä–µ—Ç–∏ —ç–∫—Ä–∞–Ω–∞
        const upperPlatforms = this.platforms.filter(p => p.y < this.canvas.height / 3);
        if(upperPlatforms.length > 0) {
            // –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é –≤–µ—Ä—Ö–Ω—é—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            const platform = upperPlatforms.reduce((highest, current) => 
                current.y < highest.y ? current : highest
            , upperPlatforms[0]);
            
            this.enemy.active = true;
            this.enemy.platform = platform;
            this.enemy.x = platform.x + platform.width/2 - this.enemy.width/2;
            this.enemy.y = platform.y;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            this.enemy.warningAlpha = 0.8;  // –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º
        }
    }

    initializeAudio() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏
        this.backgroundMusic = new Audio('Standoff 2 .mp3');
        this.backgroundMusic.loop = true;
        this.backgroundMusic.volume = 0.5;
        
        // –§–ª–∞–≥–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π
        this.isMusicPlaying = false;
        this.hasUserInteracted = false;
        
        // –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π
        this.musicButton = document.getElementById('musicToggle');
        this.musicButton.addEventListener('click', () => {
            this.hasUserInteracted = true;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
            this.toggleMusic();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º—É–∑—ã–∫–∏ –ø–æ—Å–ª–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        const startMusic = () => {
            if (!this.hasUserInteracted) {
                this.hasUserInteracted = true;
                this.playBackgroundMusic();
            }
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        document.addEventListener('click', startMusic, { once: true });
        document.addEventListener('touchstart', startMusic, { once: true });
        document.addEventListener('keydown', startMusic, { once: true });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∞—É–¥–∏–æ
        this.backgroundMusic.addEventListener('error', (e) => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ:', e);
            console.log('–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:', this.backgroundMusic.src);
        });
    }

    playBackgroundMusic() {
        if (this.hasUserInteracted && !this.isMusicPlaying) {
            const playPromise = this.backgroundMusic.play();
            
            if (playPromise !== undefined) {
                playPromise
                    .then(() => {
                        this.isMusicPlaying = true;
                        this.musicButton.querySelector('.music-icon').textContent = 'üîä';
                        console.log('–ú—É–∑—ã–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞');
                    })
                    .catch(e => {
                        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', e);
                        // –ü—Ä–æ–±—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                        setTimeout(() => {
                            if (!this.isMusicPlaying) {
                                this.playBackgroundMusic();
                            }
                        }, 1000);
                    });
            }
        }
    }

    toggleMusic() {
        if (this.isMusicPlaying) {
            this.backgroundMusic.pause();
            this.isMusicPlaying = false;
            this.musicButton.querySelector('.music-icon').textContent = 'üîà';
        } else if (this.hasUserInteracted) {
            this.playBackgroundMusic();
        }
    }

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫—Ä–∏–º–µ—Ä–∞
     */
    resetJumpscare() {
        this.jumpscare = {
            active: false,
            prePhase: false,
            timer: 0,
            duration: Game.CONSTANTS.JUMPSCARE_DURATION,
            preTimer: 0,
            preDuration: Game.CONSTANTS.JUMPSCARE_PRE_DURATION,
            scale: 1,
            opacity: 0,
            triggered: false,
            nextTriggerScore: Game.CONSTANTS.JUMPSCARE_TRIGGER_SCORE,
            sound: this.jumpscare ? this.jumpscare.sound : new Audio('napryajennyiy-zvuk.mp3')
        };
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     */
    async endGame() {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        if (this.endGameCalled) {
            console.log('endGame() —É–∂–µ –≤—ã–∑—ã–≤–∞–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }
        
        // –ï—Å–ª–∏ –∏–≥—Ä–∞ –±—ã–ª–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è
        if (!this.gameOver) {
            console.log('–ò–≥—Ä–∞ –±—ã–ª–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞, –æ—Ç–º–µ–Ω—è–µ–º –ø–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è');
            return;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ endGame() –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        this.endGameCalled = true;
        
        const finalScore = Math.floor(this.score);
        console.log('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç:', finalScore);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        const currentUser = window.auth.currentUser;
        if (currentUser) {
            try {
                await this.saveGameResult(finalScore);
                console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Firestore');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        if (window.navigation) {
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º navigation.showGameOver');
            window.navigation.showGameOver(finalScore);
        } else {
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞');
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
            this.showGameOverScreen(finalScore);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
     */
    async saveGameResult(score) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firebase
            const currentUser = window.auth.currentUser;
            if (!currentUser) {
                return;
            }
            
            const username = currentUser.email.split('@')[0]; // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ email
            console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Firestore –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', username, '—Å—á–µ—Ç:', score);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
            const leaderboardRef = window.db.collection('leaderboard').doc(currentUser.uid);
            const leaderboardDoc = await leaderboardRef.get();
            
            if (leaderboardDoc.exists) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤—ã–π —Å—á–µ—Ç –ª—É—á—à–µ
                const existingScore = leaderboardDoc.data().score;
                if (score > existingScore) {
                    await leaderboardRef.set({
                        username: username,
                        score: score,
                        date: new Date().toISOString(),
                        uid: currentUser.uid
                    });
                    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∞ –ª—É—á—à–∞—è –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore:', username, '–Ω–æ–≤—ã–π —Å—á–µ—Ç:', score);
            } else {
                    console.log('–°—á–µ—Ç –Ω–µ —É–ª—É—á—à–µ–Ω, –∑–∞–ø–∏—Å—å –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è');
                    return;
                }
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                await leaderboardRef.set({
                    username: username,
                    score: score,
                    date: new Date().toISOString(),
                    uid: currentUser.uid
                });
                console.log('–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ —Ä–µ–π—Ç–∏–Ω–≥ Firestore:', username, '—Å—á–µ—Ç:', score);
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Firestore:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getCurrentUsername() {
        if (!window.auth || !window.auth.currentUser) return '–ì–æ—Å—Ç—å';
        
        try {
            const userDoc = await window.db.collection('users').doc(window.auth.currentUser.uid).get();
            if (userDoc.exists) {
                return userDoc.data().username;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
        return '–ì–æ—Å—Ç—å';
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
     */
    async updatePlayerStats(score) {
        if (!window.auth || !window.auth.currentUser) return;
        
        try {
            const userId = window.auth.currentUser.uid;
            const userRef = window.db.collection('users').doc(userId);
            const userDoc = await userRef.get();
            
            if (userDoc.exists) {
                const userData = userDoc.data();
                const stats = userData.stats || {
                    bestScore: 0,
                    totalScore: 0,
                    averageScore: 0,
                    currentRank: 0,
                    gamesPlayedToday: 0,
                    lastGameDate: null
                };
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats.totalScore += score;
                stats.averageScore = Math.round(stats.totalScore / (stats.gamesPlayedToday || 1));
                
                if (score > stats.bestScore) {
                    stats.bestScore = score;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–≥—Ä–∞–ª –ª–∏ —Å–µ–≥–æ–¥–Ω—è
                const today = new Date().toDateString();
                const lastGameDate = stats.lastGameDate ? 
                    new Date(stats.lastGameDate).toDateString() : null;
                
                if (lastGameDate !== today) {
                    stats.gamesPlayedToday = 1;
                } else {
                    stats.gamesPlayedToday += 1;
                }
                
                stats.lastGameDate = new Date();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                await userRef.update({ stats: stats });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
                await this.updatePlayerRank(userId);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
     */
    async updatePlayerRank(userId) {
        try {
            const userRef = window.db.collection('users').doc(userId);
            const userDoc = await userRef.get();
            
            if (userDoc.exists) {
                const userData = userDoc.data();
                const bestScore = userData.stats.bestScore;
                
                // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏ –Ω–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –∏–≥—Ä–æ–∫–∞
                const leaderboardSnapshot = await window.db.collection('leaderboard')
                    .orderBy('score', 'desc')
                    .get();
                
                let rank = 1;
                for (const doc of leaderboardSnapshot.docs) {
                    if (doc.data().userId === userId) {
                        break;
                    }
                    rank++;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
                await userRef.update({
                    'stats.currentRank': rank
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:', error);
        }
    }


    /**
     * –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
     */
    showGameOverScreen(finalScore) {
        console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã —Å–æ —Å—á–µ—Ç–æ–º:', finalScore);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
        const gameScreen = document.getElementById('game-screen');
        if (gameScreen) {
            gameScreen.classList.add('hidden');
            console.log('–ò–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω —Å–∫—Ä—ã—Ç');
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        const gameOverScreen = document.getElementById('game-over-screen');
        if (gameOverScreen) {
            gameOverScreen.classList.remove('hidden');
            console.log('–≠–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã –ø–æ–∫–∞–∑–∞–Ω');
            
            // –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∫–æ—Ä–¥–µ
            const newRecordElement = document.getElementById('newRecord');
            if (newRecordElement) {
                newRecordElement.classList.add('hidden');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç
            const finalScoreElement = document.getElementById('finalScore');
            if (finalScoreElement) {
                finalScoreElement.textContent = finalScore.toLocaleString();
                console.log('–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:', finalScore);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ —Ä–µ–∫–æ—Ä–¥
            const currentUser = window.auth.currentUser;
            if (currentUser) {
                this.checkNewRecord(finalScore);
            }
        } else {
            console.error('–≠–ª–µ–º–µ–Ω—Ç game-over-screen –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ–∫–æ—Ä–¥–∞
     */
    async checkNewRecord(score) {
        try {
            const currentUser = window.auth.currentUser;
            if (!currentUser) return;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firestore
            const leaderboardDoc = await window.db.collection('leaderboard').doc(currentUser.uid).get();
            
            if (leaderboardDoc.exists) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç –Ω–æ–≤—ã–º —Ä–µ–∫–æ—Ä–¥–æ–º
                const existingScore = leaderboardDoc.data().score;
                if (score > existingScore) {
                    const newRecordElement = document.getElementById('newRecord');
                    if (newRecordElement) {
                        newRecordElement.classList.remove('hidden');
                        console.log('–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!', score);
                    }
                }
            } else {
                // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–∫–æ—Ä–¥
                const newRecordElement = document.getElementById('newRecord');
                if (newRecordElement) {
                    newRecordElement.classList.remove('hidden');
                    console.log('–ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!', score);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∫–æ—Ä–¥–∞:', error);
        }
    }
}

// –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
class NavigationManager {
    constructor() {
        this.currentScreen = 'main-menu';
        this.setupEventListeners();
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        this.registrationInProgress = new Set(); // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ username'–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    }

    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        document.getElementById('startGameBtn').addEventListener('click', () => this.showGame());
        document.getElementById('leaderboardBtn').addEventListener('click', () => this.showLeaderboard());
        document.getElementById('profileBtn').addEventListener('click', () => this.showProfile());
        document.getElementById('loginBtn').addEventListener('click', () => this.showLogin());
        document.getElementById('registerBtn').addEventListener('click', () => this.showRegister());
        document.getElementById('logoutBtn').addEventListener('click', () => this.logout());
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        this.startCountdown();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ª–∏–¥–µ—Ä–µ
        this.loadCurrentLeader();

        // –§–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        document.getElementById('loginForm').addEventListener('submit', (e) => this.handleLogin(e));
        document.getElementById('registerForm').addEventListener('submit', (e) => this.handleRegister(e));

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        document.getElementById('registerUsername').addEventListener('input', (e) => {
            this.validateUsername(e.target);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            clearTimeout(this.usernameCheckTimeout);
            this.usernameCheckTimeout = setTimeout(() => {
                this.checkUsernameAvailability(e.target.value);
            }, 500);
        });
        document.getElementById('registerPassword').addEventListener('input', (e) => this.validatePassword(e.target));
        document.getElementById('confirmPassword').addEventListener('input', (e) => this.validateConfirmPassword(e.target));
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        this.populateInvitedByDropdown();
    }

    hideAllScreens() {
        const screens = document.querySelectorAll('.screen');
        screens.forEach(screen => screen.classList.add('hidden'));
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    async populateInvitedByDropdown() {
        try {
            const dropdown = document.getElementById('invitedByDropdown');
            const input = document.getElementById('invitedByInput');
            if (!dropdown || !input) return;

            // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            dropdown.innerHTML = '<div class="dropdown-item" data-value="">–ù–∏–∫—Ç–æ</div>';

            if (window.db) {
                const usersSnapshot = await window.db.collection('users').get();
                const allUsers = [];
                
                usersSnapshot.forEach(doc => {
                    const userData = doc.data();
                    if (userData.username) {
                        allUsers.push({
                            id: doc.id,
                            username: userData.username
                        });
                    }
                });

                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
                allUsers.sort((a, b) => a.username.localeCompare(b.username));

                console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', allUsers.length);
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É):', allUsers.map(u => u.username));

                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
                allUsers.forEach(user => {
                    const item = document.createElement('div');
                    item.className = 'dropdown-item';
                    item.setAttribute('data-value', user.username);
                    item.textContent = user.username;
                    dropdown.appendChild(item);
                });

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                this.setupDropdownHandlers();

                console.log('–í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω —Å', allUsers.length, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
    setupDropdownHandlers() {
        const toggle = document.getElementById('invitedByToggle');
        const dropdown = document.getElementById('invitedByDropdown');
        const input = document.getElementById('invitedByInput');
        const container = document.querySelector('.invited-by-container');
        
        if (!toggle || !dropdown || !input || !container) return;

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–ø–∏—Å–∫–∞
        const toggleDropdown = () => {
            const isHidden = dropdown.classList.contains('hidden');
            
            if (isHidden) {
                dropdown.classList.remove('hidden');
                toggle.classList.add('rotated');
            } else {
                dropdown.classList.add('hidden');
                toggle.classList.remove('rotated');
            }
        };

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
        toggle.addEventListener('click', (e) => {
            e.stopPropagation();
            toggleDropdown();
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        input.addEventListener('click', (e) => {
            e.stopPropagation();
            toggleDropdown();
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–µ—Å–ª–∏ –∫–ª–∏–∫ –Ω–µ –Ω–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–µ)
        container.addEventListener('click', (e) => {
            if (!toggle.contains(e.target)) {
                e.stopPropagation();
                toggleDropdown();
            }
        });

        // –í—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        dropdown.addEventListener('click', (e) => {
            const item = e.target.closest('.dropdown-item');
            if (item) {
                const value = item.getAttribute('data-value');
                const text = item.textContent;
                
                input.value = value ? text : '';
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                dropdown.querySelectorAll('.dropdown-item').forEach(el => el.classList.remove('selected'));
                item.classList.add('selected');
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
                dropdown.classList.add('hidden');
                toggle.classList.remove('rotated');
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ —Å–ø–∏—Å–∫–∞
        document.addEventListener('click', (e) => {
            if (!container.contains(e.target)) {
                dropdown.classList.add('hidden');
                toggle.classList.remove('rotated');
            }
        });
    }

    showScreen(screenId) {
        this.hideAllScreens();
        document.getElementById(screenId).classList.remove('hidden');
        this.currentScreen = screenId;
    }

    showMenu() {
        this.showScreen('main-menu');
    }

    showLogin() {
        this.showScreen('login-screen');
    }

    showRegister() {
        this.showScreen('register-screen');
    }

    showProfile() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Firebase
        const currentUser = window.auth.currentUser;
        if (!currentUser) {
            this.showLogin();
            return;
        }
        this.showScreen('profile-screen');
        this.loadPlayerProfile();
    }

    showLeaderboard() {
        this.showScreen('leaderboard-screen');
        this.loadLeaderboard();
    }

    showGame() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∏–≥—Ä—ã
        const currentUser = window.auth.currentUser;
        if (!currentUser) {
            this.showError('–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
            this.showLogin();
            return;
        }
        
        this.showScreen('game-screen');
        if (window.game) {
            window.game.startNewGame();
        }
    }

    showGameOver(score) {
        console.log('NavigationManager.showGameOver –≤—ã–∑–≤–∞–Ω —Å–æ —Å—á–µ—Ç–æ–º:', score);
        this.showScreen('game-over-screen');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        const scoreDisplayElement = document.querySelector('.score-display');
        if (scoreDisplayElement) {
            scoreDisplayElement.style.display = 'block';
            console.log('–ë–ª–æ–∫ .score-display –ø–æ–∫–∞–∑–∞–Ω');
        } else {
            console.error('–ë–ª–æ–∫ .score-display –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
        
        // –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∫–æ—Ä–¥–µ
        const newRecordElement = document.getElementById('newRecord');
        if (newRecordElement) {
            newRecordElement.classList.add('hidden');
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–∑—É –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
        let finalScoreElement = document.getElementById('finalScore');
        console.log('–ü–æ–∏—Å–∫ finalScore —ç–ª–µ–º–µ–Ω—Ç–∞:', finalScoreElement);
        
        if (finalScoreElement) {
            finalScoreElement.textContent = score.toLocaleString();
            console.log('–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ NavigationManager:', score);
        } else {
            console.error('–≠–ª–µ–º–µ–Ω—Ç finalScore –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏...');
            
            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            const scoreDisplayElement = document.querySelector('.score-display');
            console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º .score-display –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:', scoreDisplayElement);
            
            if (scoreDisplayElement) {
                console.log('–°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç–∞');
                
                // –°–æ–∑–¥–∞–µ–º h3 —ç–ª–µ–º–µ–Ω—Ç
                const h3Element = document.createElement('h3');
                
                // –°–æ–∑–¥–∞–µ–º span —Å ID finalScore
                const spanElement = document.createElement('span');
                spanElement.id = 'finalScore';
                spanElement.textContent = score.toLocaleString();
                
                // –î–æ–±–∞–≤–ª—è–µ–º span –≤ h3
                h3Element.textContent = '–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ';
                h3Element.appendChild(spanElement);
                
                // –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º .score-display
                scoreDisplayElement.innerHTML = '';
                scoreDisplayElement.appendChild(h3Element);
                
                // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç newRecord
                const newRecordElement = document.createElement('div');
                newRecordElement.id = 'newRecord';
                newRecordElement.className = 'new-record hidden';
                newRecordElement.textContent = 'üéâ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥! üéâ';
                scoreDisplayElement.appendChild(newRecordElement);
                
                console.log('–ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ .score-display');
                console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ finalScore —ç–ª–µ–º–µ–Ω—Ç–∞:', document.getElementById('finalScore'));
            } else {
                console.error('–ë–ª–æ–∫ .score-display –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è finalScore!');
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        this.updateGameOverPrizeInfo();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ —Ä–µ–∫–æ—Ä–¥
        const currentUser = window.auth.currentUser;
        if (currentUser) {
            this.checkNewRecord(score);
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Telegram username)
    validateUsername(input) {
        const username = input.value;
        const errorElement = document.getElementById('registerUsernameError');
        // –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram username: username (3-32 —Å–∏–º–≤–æ–ª–∞, —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
        const regex = /^[a-zA-Z0-9_]{3,32}$/;
        
        if (username.length === 0) {
            errorElement.textContent = '';
            errorElement.classList.remove('success');
            input.classList.remove('invalid');
            return false;
        }
        
        if (!regex.test(username)) {
            errorElement.textContent = 'Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _. –î–ª–∏–Ω–∞ 3-32 —Å–∏–º–≤–æ–ª–∞.';
            errorElement.classList.remove('success');
            input.classList.add('invalid');
            return false;
        } else {
            errorElement.textContent = '‚úì Username –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ';
            errorElement.classList.add('success');
            input.classList.remove('invalid');
            return true;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    async checkUsernameAvailability(username) {
        const errorElement = document.getElementById('registerUsernameError');
        const input = document.getElementById('registerUsername');
        
        if (!username || username.length < 3) {
            return;
        }
        
        try {
            const isUnique = await this.checkUsernameUnique(username);
            if (isUnique) {
                errorElement.textContent = '‚úì –ò–º—è –¥–æ—Å—Ç—É–ø–Ω–æ';
                errorElement.classList.add('success');
                input.classList.remove('invalid');
            } else {
                errorElement.textContent = '‚ùå –ò–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ';
                errorElement.classList.remove('success');
                input.classList.add('invalid');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏:', error);
            errorElement.textContent = '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏';
            errorElement.classList.remove('success');
            input.classList.add('invalid');
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    validatePassword(input) {
        const password = input.value;
        const errorElement = document.getElementById('registerPasswordError');
        
        if (password.length === 0) {
            errorElement.textContent = '';
            input.classList.remove('invalid');
            return false;
        }
        
        if (password.length < 6) {
            errorElement.textContent = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.';
            input.classList.add('invalid');
            return false;
        } else {
            errorElement.textContent = '‚úì –ü–∞—Ä–æ–ª—å –ø–æ–¥—Ö–æ–¥–∏—Ç';
            errorElement.classList.add('success');
            input.classList.remove('invalid');
            return true;
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    validateConfirmPassword(input) {
        const password = document.getElementById('registerPassword').value;
        const confirmPassword = input.value;
        const errorElement = document.getElementById('confirmPasswordError');
        
        if (confirmPassword.length === 0) {
            errorElement.textContent = '';
            input.classList.remove('invalid');
            return false;
        }
        
        if (password !== confirmPassword) {
            errorElement.textContent = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.';
            input.classList.add('invalid');
            return false;
        } else {
            errorElement.textContent = '‚úì –ü–∞—Ä–æ–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
            errorElement.classList.add('success');
            input.classList.remove('invalid');
            return true;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
    async handleLogin(e) {
        e.preventDefault();
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
        const loginBtn = document.querySelector('#loginForm button[type="submit"]');
        if (loginBtn.disabled) {
            return; // –£–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞
        }
        
        const username = document.getElementById('loginUsername').value;
        const password = document.getElementById('loginPassword').value;
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loginBtn.disabled = true;
        loginBtn.textContent = '–í—Ö–æ–¥...';
        loginBtn.style.opacity = '0.6';
        
        try {
            await this.loginUser(username, password);
            this.showMenu();
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + error.message);
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            loginBtn.disabled = false;
            loginBtn.textContent = '–í–æ–π—Ç–∏';
            loginBtn.style.opacity = '1';
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    async handleRegister(e) {
        e.preventDefault();
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
        const registerBtn = document.querySelector('#registerForm button[type="submit"]');
        if (registerBtn.disabled) {
            return; // –£–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        }
        
        const username = document.getElementById('registerUsername').value;
        const password = document.getElementById('registerPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
        const invitedByInput = document.getElementById('invitedByInput');
        const invitedBy = invitedByInput ? invitedByInput.value : '';
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –∑–∞—â–∏—Ç–∞ –æ—Ç race condition
        if (this.registrationInProgress.has(username)) {
            this.showError('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
            return;
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!this.validateUsername(document.getElementById('registerUsername'))) {
            this.showError('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }
        
        if (!this.validatePassword(document.getElementById('registerPassword'))) {
            this.showError('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å');
            return;
        }
        
        if (!this.validateConfirmPassword(document.getElementById('confirmPassword'))) {
            this.showError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
            return;
        }
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        registerBtn.disabled = true;
        registerBtn.textContent = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...';
        registerBtn.style.opacity = '0.6';
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–π username
        this.registrationInProgress.add(username);
        console.log('üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è:', username);
        
        try {
            await this.registerUser(username, password, invitedBy);
            this.showMenu();
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + error.message);
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            registerBtn.disabled = false;
            registerBtn.textContent = '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è';
            registerBtn.style.opacity = '1';
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º username
            this.registrationInProgress.delete(username);
            console.log('üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è:', username);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async checkUsernameUnique(username) {
        try {
            if (!window.db) {
                throw new Error('Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }
            
            const existingUsers = await window.db.collection('users').where('username', '==', username).get();
            return existingUsers.empty;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ username:', error);
            return false; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∏–º—è –∑–∞–Ω—è—Ç–æ
        }
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async registerUser(username, password, invitedBy = null) {
        try {
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if (!window.auth) {
                throw new Error('Firebase Auth –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const isUsernameUnique = await this.checkUsernameUnique(username);
            if (!isUsernameUnique) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Firebase Auth
            const email = `${username}@bmk.local`;
            
            const userCredential = await window.auth.createUserWithEmailAndPassword(email, password);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
               try {
                   // –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users
                   await window.db.collection('users').doc(userCredential.user.uid).set({
                       username: username,
                       email: email,
                       createdAt: new Date().toISOString(),
                       lastLogin: new Date().toISOString(),
                       invitedBy: invitedBy || null,
                       invitedFriends: [],
                       invitedCount: 0
                   });
                   
                   // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ username –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                   await window.db.collection('usersByUsername').doc(username).set({
                       uid: userCredential.user.uid,
                       email: email,
                       createdAt: new Date().toISOString()
                   });
                   
                   console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firestore –ø–æ–¥ UID:', userCredential.user.uid);
                   console.log('‚úÖ –ò–Ω–¥–µ–∫—Å –ø–æ username —Å–æ–∑–¥–∞–Ω:', username);
                   
                   // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
                   if (invitedBy) {
                       try {
                           const usersSnapshot = await window.db.collection('users').where('username', '==', invitedBy).get();
                           if (!usersSnapshot.empty) {
                               const referrerDoc = usersSnapshot.docs[0];
                               const referrerData = referrerDoc.data();
                               const newInvitedFriends = [...(referrerData.invitedFriends || []), userCredential.user.uid];
                               
                               await window.db.collection('users').doc(referrerDoc.id).update({
                                   invitedFriends: newInvitedFriends,
                                   invitedCount: newInvitedFriends.length
                               });
                               console.log('–°—á–µ—Ç—á–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è:', invitedBy);
                           }
                       } catch (error) {
                           console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö:', error);
                       }
                   }
                   
                   // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ leaderboard
                   await window.db.collection('leaderboard').doc(userCredential.user.uid).set({
                       username: username,
                       score: 0,
                       createdAt: new Date().toISOString()
                   });
                   console.log('–ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ leaderboard —Å–æ–∑–¥–∞–Ω–∞');
               } catch (error) {
                   console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
               }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if (typeof updateUIForLoggedInUser === 'function') {
                updateUIForLoggedInUser({ username: username, uid: userCredential.user.uid });
                console.log('UI –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', username);
            }
            
            return { username: username, uid: userCredential.user.uid };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ Firebase:', error);
            console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
            console.error('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error.message);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
            if (error.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            } else if (error.code === 'auth/email-already-in-use') {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            } else if (error.code === 'auth/weak-password') {
                throw new Error('–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π');
            } else if (error.code === 'auth/invalid-email') {
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            } else {
                throw error;
            }
        }
    }

    // –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async loginUser(username, password) {
        try {
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if (!window.auth) {
                throw new Error('Firebase Auth –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Firebase Auth
            const email = `${username}@bmk.local`;
            
            const userCredential = await window.auth.signInWithEmailAndPassword(email, password);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º lastLogin –≤ Firestore
            try {
                await window.db.collection('users').doc(userCredential.user.uid).set({
                    lastLogin: new Date().toISOString()
                }, { merge: true });
                console.log('LastLogin –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Firestore');
        } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è lastLogin:', error);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            if (typeof updateUIForLoggedInUser === 'function') {
                updateUIForLoggedInUser({ username: username, uid: userCredential.user.uid });
                console.log('UI –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', username);
            }
            
            return { username: username, uid: userCredential.user.uid };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ Firebase:', error);
            console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
            console.error('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error.message);
            throw error;
        }
    }

    // –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async logout() {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Firebase Auth
            await window.auth.signOut();
            this.showMenu();
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
        }
    }
    
    // –°—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –¥–æ –∫–æ–Ω—Ü–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    startCountdown() {
        // –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: 31.10.2025 17:00 (–¢–∞—à–∫–µ–Ω—Ç - UTC+5)
        const endDate = new Date('2025-10-31T17:00:00+05:00');
        
        const updateCountdown = () => {
            const now = new Date();
            const timeLeft = endDate - now;
            
            const countdownElement = document.getElementById('countdownTime');
            if (!countdownElement) return;
            
            if (timeLeft <= 0) {
                countdownElement.textContent = 'üèÅ –†–û–ó–´–ì–†–´–® –ó–ê–í–ï–†–®–ï–ù!';
                countdownElement.style.color = '#FF0000';
                return;
            }
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏, —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã
            const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
            const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
            let countdownText = '';
            
            if (days > 0) {
                countdownText = `${days} –¥–Ω. ${hours} —á.`;
            } else if (hours > 0) {
                countdownText = `${hours} —á. ${minutes} –º–∏–Ω.`;
            } else {
                countdownText = `${minutes} –º–∏–Ω—É—Ç!`;
                // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞—Å–∞
                countdownElement.style.color = '#FF0000';
                countdownElement.style.animation = 'countdownUrgent 0.5s ease-in-out infinite alternate';
            }
            
            countdownElement.textContent = countdownText;
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É –∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        updateCountdown();
        setInterval(updateCountdown, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ª–∏–¥–µ—Ä–µ
    async loadCurrentLeader() {
        try {
            const leaderInfoElement = document.getElementById('leaderInfo');
            if (!leaderInfoElement) return;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if (!window.db) {
                leaderInfoElement.textContent = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-1 –∏–≥—Ä–æ–∫–∞ –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞
            const leaderboardQuery = await window.db.collection('leaderboard')
                .orderBy('score', 'desc')
                .limit(1)
                .get();
            
            console.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–µ—Ä–∞: –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', leaderboardQuery.size);
            
            if (!leaderboardQuery.empty) {
                const topPlayer = leaderboardQuery.docs[0].data();
                const username = topPlayer.username || '–ò–≥—Ä–æ–∫';
                const bestScore = topPlayer.score || 0;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏–¥–µ—Ä–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—á–µ—Ç–∞
                leaderInfoElement.innerHTML = `${username} - <span class="leader-score">${bestScore.toLocaleString()} –æ—á–∫–æ–≤</span>`;
            } else {
                leaderInfoElement.textContent = '–ï—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–ª!';
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            setTimeout(() => this.loadCurrentLeader(), 30000);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–∞:', error);
            const leaderInfoElement = document.getElementById('leaderInfo');
            if (leaderInfoElement) {
                leaderInfoElement.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
            }
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞
    async loadPlayerProfile() {
        const currentUser = window.auth.currentUser;
        if (!currentUser) return;
        
        try {
            const username = currentUser.email.split('@')[0]; // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ email
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firestore
            const userDoc = await window.db.collection('users').doc(currentUser.uid).get();
            const userData = userDoc.exists ? userDoc.data() : {};
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const leaderboardDoc = await window.db.collection('leaderboard').doc(currentUser.uid).get();
            const userEntry = leaderboardDoc.exists ? leaderboardDoc.data() : null;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–µ
            const playerNameElement = document.getElementById('playerName');
            if (playerNameElement) {
                playerNameElement.textContent = username;
            }
            
            const playerJoinDateElement = document.getElementById('playerJoinDate');
            if (playerJoinDateElement && userData.createdAt) {
                playerJoinDateElement.textContent = `–ò–≥—Ä–æ–∫ —Å ${new Date(userData.createdAt).toLocaleDateString()}`;
            } else if (playerJoinDateElement) {
                playerJoinDateElement.textContent = `–ò–≥—Ä–æ–∫ —Å ${new Date(currentUser.metadata.creationTime).toLocaleDateString()}`;
            }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const bestScore = userEntry ? userEntry.score : 0;
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–≥ –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞
            const leaderboardSnapshot = await window.db.collection('leaderboard').orderBy('score', 'desc').get();
            let rank = '-';
            let rankIndex = 1;
            leaderboardSnapshot.forEach(doc => {
                if (doc.id === currentUser.uid) {
                    rank = `#${rankIndex}`;
                }
                rankIndex++;
            });
            
            
            const bestScoreElement = document.querySelector('[data-stat="bestScore"]');
            if (bestScoreElement) bestScoreElement.textContent = bestScore.toLocaleString();
            
            const currentRankElement = document.querySelector('[data-stat="currentRank"]');
            if (currentRankElement) currentRankElement.textContent = rank;
            
            const invitedFriendsElement = document.querySelector('[data-stat="invitedFriends"]');
            if (invitedFriendsElement) {
                const invitedCount = userData.invitedCount || 0;
                invitedFriendsElement.textContent = invitedCount;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö
                const requirementElement = document.querySelector('.requirement-text');
                if (requirementElement) {
                    if (invitedCount >= 3) {
                        requirementElement.textContent = '‚úÖ –£—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!';
                        requirementElement.style.color = '#4CAF50';
                    } else {
                        requirementElement.innerHTML = `–ù—É–∂–Ω–æ: ${3 - invitedCount} –¥—Ä—É–∑–µ–π –¥–æ 14 –ª–µ—Ç –ò –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ <a href="https://t.me/LTYH2/482" target="_blank" class="telegram-link">@LTYH2</a> –µ—â–µ`;
                        requirementElement.style.color = '#FFD700';
                    }
                }
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π
            await this.loadInvitedFriendsList(userData.invitedFriends || []);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ Firestore:', error);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π
    async loadInvitedFriendsList(invitedFriendsIds) {
        try {
            const friendsListElement = document.getElementById('invitedFriendsList');
            if (!friendsListElement) return;

            if (!invitedFriendsIds || invitedFriendsIds.length === 0) {
                friendsListElement.innerHTML = '<p class="no-friends">–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏</p>';
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const friendsData = [];
            for (const friendId of invitedFriendsIds) {
                try {
                    if (!friendId || friendId.trim() === '') continue;
                    
                    const friendDoc = await window.db.collection('users').doc(friendId).get();
                    if (friendDoc.exists) {
                        const friendData = friendDoc.data();
                        friendsData.push({
                            username: friendData.username,
                            createdAt: friendData.createdAt
                        });
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∞:', friendId, error);
                }
            }

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
            if (friendsData.length === 0) {
                friendsListElement.innerHTML = '<p class="no-friends">–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏</p>';
            } else {
                friendsListElement.innerHTML = friendsData.map(friend => `
                    <div class="friend-item">
                        <span class="friend-username">${friend.username}</span>
                        <span class="friend-date">${new Date(friend.createdAt).toLocaleDateString()}</span>
                    </div>
                `).join('');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π:', error);
            const friendsListElement = document.getElementById('invitedFriendsList');
            if (friendsListElement) {
                friendsListElement.innerHTML = '<p class="no-friends">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞</p>';
            }
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    async loadLeaderboard() {
        const leaderboardList = document.getElementById('leaderboardList');
        leaderboardList.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞...</div>';
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ Firestore
            const leaderboardSnapshot = await window.db.collection('leaderboard').orderBy('score', 'desc').get();
            
            if (leaderboardSnapshot.empty) {
                leaderboardList.innerHTML = '<div class="loading">–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç</div>';
                return;
            }
            
            let html = '';
            let rank = 1;
            const currentUser = window.auth.currentUser;
            
            leaderboardSnapshot.forEach(doc => {
                const entry = doc.data();
                const isCurrentPlayer = currentUser && entry.uid === currentUser.uid;
                
                html += `
                    <div class="leaderboard-item ${isCurrentPlayer ? 'current-player' : ''}">
                        <div class="leaderboard-rank">#${rank}</div>
                        <div class="leaderboard-name">${entry.username}</div>
                        <div class="leaderboard-score">${entry.score.toLocaleString()}</div>
                    </div>
                `;
                rank++;
            });
            
            leaderboardList.innerHTML = html;
            console.log('–†–µ–π—Ç–∏–Ω–≥ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ Firestore:', leaderboardSnapshot.size, '–∑–∞–ø–∏—Å–µ–π');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–∑ Firestore:', error);
            leaderboardList.innerHTML = '<div class="loading">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞</div>';
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ–∫–æ—Ä–¥–∞
    async checkNewRecord(score) {
        if (!window.auth || !window.auth.currentUser) return;
        
        try {
            const currentUser = window.auth.currentUser;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º leaderboard –∫–∞–∫ –µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã
            const leaderboardDoc = await window.db.collection('leaderboard').doc(currentUser.uid).get();
            
            if (leaderboardDoc.exists) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç –Ω–æ–≤—ã–º —Ä–µ–∫–æ—Ä–¥–æ–º
                const existingScore = leaderboardDoc.data().score || 0;
                console.log('–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—á–µ—Ç–∞: —Ç–µ–∫—É—â–∏–π =', score, ', –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ª—É—á—à–∏–π =', existingScore);
                
                if (score > existingScore) {
                    const newRecordElement = document.getElementById('newRecord');
                    if (newRecordElement) {
                        newRecordElement.classList.remove('hidden');
                        console.log('üéâ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!', score, '> –ø—Ä–µ–¥—ã–¥—É—â–∏–π:', existingScore);
                    }
                } else {
                    console.log('–†–µ–∫–æ—Ä–¥ –Ω–µ –ø–æ–±–∏—Ç:', score, '<=', existingScore);
                }
            } else {
                // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–∫–æ—Ä–¥
                const newRecordElement = document.getElementById('newRecord');
                if (newRecordElement) {
                    newRecordElement.classList.remove('hidden');
                    console.log('üéâ –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!', score);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∫–æ—Ä–¥–∞:', error);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    updateGameOverPrizeInfo() {
        // –ö–æ–ø–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ—Ä–µ
        const leaderInfoMain = document.getElementById('leaderInfo');
        const leaderInfoGameOver = document.getElementById('leaderInfoGameOver');
        if (leaderInfoMain && leaderInfoGameOver) {
            leaderInfoGameOver.innerHTML = leaderInfoMain.innerHTML;
        }
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        const countdownTimeMain = document.getElementById('countdownTime');
        const countdownTimeGameOver = document.getElementById('countdownTimeGameOver');
        if (countdownTimeMain && countdownTimeGameOver) {
            countdownTimeGameOver.textContent = countdownTimeMain.textContent;
            countdownTimeGameOver.style.color = countdownTimeMain.style.color;
            countdownTimeGameOver.style.animation = countdownTimeMain.style.animation;
        }
    }

    // –ü–æ–∫–∞–∑ –æ—à–∏–±–æ–∫
    showError(message) {
        alert(message); // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫—Ä–∞—Å–∏–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
window.showMenu = () => navigation.showMenu();
window.showLogin = () => navigation.showLogin();
window.showRegister = () => navigation.showRegister();
window.showProfile = () => navigation.showProfile();
window.showLeaderboard = () => navigation.showLeaderboard();
window.refreshLeaderboard = () => navigation.loadLeaderboard();
window.startNewGame = () => navigation.showGame();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
const navigation = new NavigationManager();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
const game = new Game(); 

// –î–µ–ª–∞–µ–º –∏–≥—Ä—É –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
window.game = game;
window.navigation = navigation;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–∫–∏ FPS (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞)
window.enableFPSDebug = function() {
    if (window.game) {
        window.game.showDebugInfo = true;
        console.log('üéÆ –û—Ç–ª–∞–¥–∫–∞ FPS –≤–∫–ª—é—á–µ–Ω–∞! –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.');
    }
};

window.disableFPSDebug = function() {
    if (window.game) {
        window.game.showDebugInfo = false;
        console.log('üéÆ –û—Ç–ª–∞–¥–∫–∞ FPS –æ—Ç–∫–ª—é—á–µ–Ω–∞.');
    }
}; 